name: Testing Branch CI/CD Pipeline

on:
  push:
    branches: [ testing ]

jobs:
  # STAGE 1: Test Code
  test-services:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [product_service, order_service, customer_service]  # ‚Üê UNDERSCOPES
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies and run tests
      run: |
        echo "üì¶ Testing service: ${{ matrix.service }}"
        cd backend/${{ matrix.service }}  # ‚Üê Now matches your structure
        pip install -r requirements.txt
        echo "üß™ Running tests..."
        if python -m pytest test_app.py -v; then
          echo "‚úÖ Tests passed for ${{ matrix.service }}"
        else
          echo "‚ùå Tests failed for ${{ matrix.service }}"
          exit 1
        fi

  # STAGE 2: Build and Push to ACR
  build-and-push:
    name: Build and Push Images
    needs: test-services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [product_service, order_service, customer_service, frontend]  # ‚Üê UNDERSCOPES
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
    
    - name: Build Docker image
      run: |
        if [ "${{ matrix.service }}" = "frontend" ]; then
          echo "üèóÔ∏è Building frontend image..."
          docker build -t ${{ secrets.ACR_REGISTRY }}/week10_frontend:${{ github.sha }} -f ./frontend/Dockerfile ./frontend
        else
          echo "üèóÔ∏è Building ${{ matrix.service }} image..."
          docker build -t ${{ secrets.ACR_REGISTRY }}/week10_${{ matrix.service }}:${{ github.sha }} \
            -f ./backend/${{ matrix.service }}/Dockerfile ./backend/${{ matrix.service }}
        fi
    
    - name: Push Docker image
      run: |
        if [ "${{ matrix.service }}" = "frontend" ]; then
          docker push ${{ secrets.ACR_REGISTRY }}/week10_frontend:${{ github.sha }}
        else
          docker push ${{ secrets.ACR_REGISTRY }}/week10_${{ matrix.service }}:${{ github.sha }}
        fi
        echo "‚úÖ Successfully pushed ${{ matrix.service }}:${{ github.sha }}"

  # STAGE 3: Deploy to Staging Environment
  deploy-staging:
    name: Deploy to Staging
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure Azure credentials
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Connect to AKS Staging Cluster
      uses: azure/aks-set-context@v3
      with:
        cluster-name: ${{ secrets.AKS_STAGING_CLUSTER }}
        resource-group: ${{ secrets.AKS_STAGING_RESOURCE_GROUP }}
    
    - name: Create staging namespace
      run: kubectl create namespace staging --dry-run=client -o yaml | kubectl apply -f -
    
    - name: Update image tags in Kubernetes manifests
      run: |
        # Create temporary updated manifests with correct image tags
        mkdir -p temp-k8s
        cp -r week10/k8s/* temp-k8s/
        
        # Update image tags - match your actual image names
        sed -i "s|week10_product_service:latest|week10_product_service:${{ github.sha }}|g" temp-k8s/product-service.yaml
        sed -i "s|week10_order_service:latest|week10_order_service:${{ github.sha }}|g" temp-k8s/order-service.yaml
        sed -i "s|week10_customer_service:latest|week10_customer_service:${{ github.sha }}|g" temp-k8s/customer-service.yaml
        sed -i "s|week10_example01_frontend:latest|week10_frontend:${{ github.sha }}|g" temp-k8s/frontend.yaml
    
    - name: Deploy to staging namespace
      run: |
        echo "üöÄ Deploying to staging environment..."
        kubectl apply -f temp-k8s/ -n staging
    
    - name: Wait for services to be ready
      run: |
        echo "‚è≥ Waiting for services to be ready..."
        sleep 30
        kubectl get pods -n staging
        echo "‚úÖ Staging deployment completed!"

  # STAGE 4: Destroy Staging Environment
  destroy-staging:
    name: Destroy Staging
    needs: deploy-staging
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure Azure credentials
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Connect to AKS Staging Cluster
      uses: azure/aks-set-context@v3
      with:
        cluster-name: ${{ secrets.AKS_STAGING_CLUSTER }}
        resource-group: ${{ secrets.AKS_STAGING_RESOURCE_GROUP }}
    
    - name: Destroy staging environment
      run: |
        echo "üóëÔ∏è Destroying staging environment..."
        kubectl delete -f temp-k8s/ -n staging --ignore-not-found=true
        kubectl delete namespace staging --ignore-not-found=true
        echo "‚úÖ Staging environment destroyed!"