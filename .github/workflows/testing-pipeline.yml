name: Testing Branch CI/CD Pipeline

on:
  push:
    branches: [ testing ]

jobs:
  # STAGE 1: Test Code
  test-services:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [product-service, order-service, customer-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies and run tests
      run: |
        cd backend/${{ matrix.service }}
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        fi
        # Run basic tests
        python -m pytest test_app.py -v
        echo "‚úÖ Tests passed for ${{ matrix.service }}"

  # STAGE 2: Build and Push to ACR
  build-and-push:
    name: Build and Push Images
    needs: test-services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [product-service, order-service, customer-service, frontend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
    
    - name: Build and push Docker image
      run: |
        if [ "${{ matrix.service }}" = "frontend" ]; then
          docker build -t ${{ secrets.ACR_REGISTRY }}/week10_frontend:${{ github.sha }} -f ./frontend/Dockerfile ./frontend
          docker push ${{ secrets.ACR_REGISTRY }}/week10_frontend:${{ github.sha }}
        else
          docker build -t ${{ secrets.ACR_REGISTRY }}/week10_${{ matrix.service }}:${{ github.sha }} \
            -f ./backend/${{ matrix.service }}/Dockerfile ./backend/${{ matrix.service }}
          docker push ${{ secrets.ACR_REGISTRY }}/week10_${{ matrix.service }}:${{ github.sha }}
        fi
        echo "‚úÖ Successfully built and pushed ${{ matrix.service }}"

  # STAGE 3: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging Environment
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure Azure credentials
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy to AKS Staging
      uses: azure/aks-set-context@v3
      with:
        cluster-name: ${{ secrets.AKS_STAGING_CLUSTER }}
        resource-group: ${{ secrets.AKS_STAGING_RESOURCE_GROUP }}
    
    - name: Create staging namespace
      run: |
        kubectl create namespace staging --dry-run=client -o yaml | kubectl apply -f -
    
    - name: Deploy to staging namespace
      run: |
        kubectl apply -f week10/k8s/ -n staging
        echo "üîÑ Waiting for staging services to be ready..."
    
    - name: Wait for services
      run: |
        kubectl wait --for=condition=ready pod -l app=product-service -n staging --timeout=300s
        kubectl wait --for=condition=ready pod -l app=frontend -n staging --timeout=300s
        echo "‚úÖ Staging environment is ready!"
    
    - name: Get staging endpoints
      run: |
        echo "üìä Staging Services:"
        kubectl get services -n staging
        echo "üåê Frontend URL:"
        kubectl get service frontend-w10-aks -n staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}'

  # STAGE 4: Destroy Staging
  destroy-staging:
    name: Destroy Staging Environment
    needs: deploy-staging
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure Azure credentials
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Connect to AKS
      uses: azure/aks-set-context@v3
      with:
        cluster-name: ${{ secrets.AKS_STAGING_CLUSTER }}
        resource-group: ${{ secrets.AKS_STAGING_RESOURCE_GROUP }}
    
    - name: Destroy staging environment
      run: |
        echo "üóëÔ∏è Destroying staging environment..."
        kubectl delete -f week10/k8s/ -n staging --ignore-not-found=true
        kubectl delete namespace staging --ignore-not-found=true
        echo "‚úÖ Staging environment destroyed!"